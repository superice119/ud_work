Index: linux-3.18.27/drivers/spi/spi-mt7621.c
===================================================================
--- linux-3.18.27.orig/drivers/spi/spi-mt7621.c
+++ linux-3.18.27/drivers/spi/spi-mt7621.c
@@ -26,6 +26,10 @@
 #include <linux/platform_device.h>
 #include <linux/swab.h>
 
+//add by zzk 20170828 
+#include <linux/gpio.h>
+#include <linux/delay.h>	/*time*/
+
 #include <ralink_regs.h>
 
 #define SPI_BPW_MASK(bits) BIT((bits) - 1)
@@ -51,12 +55,21 @@
 #define MT7621_SPI_MOREBUF	0x2c
 #define MT7621_SPI_SPACE	0x3c
 
+#define MT7621_SPI_STATUS   0x34
+
 #define MT7621_CPHA		BIT(5)
 #define MT7621_CPOL		BIT(4)
 #define MT7621_LSB_FIRST	BIT(3)
 
 #define RT2880_SPI_MODE_BITS	(SPI_CPOL | SPI_CPHA | SPI_LSB_FIRST | SPI_CS_HIGH)
 
+//add by zzk 20170828 
+int  spi_cs[]={-1, 6, 0, 1, 3, 14, 15, 16, 17, 24}; //4, i2c_clk; 5, i2c_sda
+
+#define MT7621_MB_STRANS	/* allow word transfer */
+
+//#undef  MT7621_MB_STRANS
+
 struct mt7621_spi;
 
 struct mt7621_spi {
@@ -103,14 +116,61 @@ static void mt7621_spi_set_cs(struct spi
 	u32 polar = 0;
 
         mt7621_spi_reset(rs);
-	if (enable)
-		polar = BIT(cs);
-	mt7621_spi_write(rs, MT7621_SPI_POLAR, polar);
+	/*****************************************
+	  modfiy  zkz 
+	 ******************************************/
+#if 1
+	if(cs >= 2) {
+
+		//int ret = gpio_request_one(spi_cs[cs], (GPIOF_OUT_INIT_HIGH | GPIOF_ACTIVE_LOW), NULL);
+
+		gpio_set_value_cansleep(spi_cs[cs], (spi->mode&SPI_CS_HIGH)?(enable):(!enable));
+		//gpio_set_value_cansleep(spi_cs[cs], enable);
+		dev_info(spi->master->dev.parent,"in %s --- cs%d , active = %2X \n", __func__, cs, enable);
+
+		//gpio_free(spi_cs[cs]);
+	}
+	else
+	{
+#endif
+		//if (enable)
+		//polar = BIT(cs);
+		//mt7621_spi_write(rs, MT7621_SPI_POLAR, polar);
+		unsigned long flags;
+
+		spin_lock_irqsave(&rs->lock, flags);
+		u32 reg = mt7621_spi_read(rs, MT7621_SPI_POLAR);
+
+		if (enable)
+			reg |= (BIT(cs));
+		else
+			reg &= ~(BIT(cs));
+
+		mt7621_spi_write(rs, MT7621_SPI_POLAR, reg);
+		spin_unlock_irqrestore(&rs->lock, flags);
+#if 1
+		if(cs == 1) {
+			u32 reg1 = mt7621_spi_read(rs, MT7621_SPI_STATUS);
+			udelay(10);
+#if 0
+			u32 reg2 = mt7621_spi_read(rs, MT7621_SPI_POLAR);
+			u32 reg3 = mt7621_spi_read(rs, MT7621_SPI_SPACE);
+
+			dev_dbg(spi->master->dev.parent,"cs func in %s , SPI_MASTER = %2X,  status = %x,  polar = %x, space = %x\n", __func__, reg, reg1, reg2, reg3);
+#endif
+
+		}
+#endif
+#if 1
+	}
+#endif
+
 }
 
 static int mt7621_spi_prepare(struct spi_device *spi, unsigned int speed)
 {
 	struct mt7621_spi *rs = spidev_to_mt7621_spi(spi);
+	int cs = spi->chip_select;
 	u32 rate;
 	u32 reg;
 
@@ -126,7 +186,12 @@ static int mt7621_spi_prepare(struct spi
 		rate = 2;
 
 	reg = mt7621_spi_read(rs, MT7621_SPI_MASTER);
+
+	if (cs == 1) 
+	reg &= ~(0xcfff << 16);
+	else	
 	reg &= ~(0xfff << 16);
+
 	reg |= (rate - 2) << 16;
 	rs->speed = speed;
 
@@ -150,6 +215,20 @@ static int mt7621_spi_prepare(struct spi
 	}
 	mt7621_spi_write(rs, MT7621_SPI_MASTER, reg);
 
+#if 1
+
+	if (cs == 1) {
+		u32 reg1 = mt7621_spi_read(rs, MT7621_SPI_STATUS);
+		udelay(10);
+#if 0
+		u32 reg2 = mt7621_spi_read(rs, MT7621_SPI_POLAR);
+		u32 reg3 = mt7621_spi_read(rs, MT7621_SPI_SPACE);
+
+		dev_dbg(spi->master->dev.parent,"in %s , SPI_MASTER = %2X,  status = %x,  polar = %x, space = %x\n", __func__, reg, reg1, reg2, reg3);
+#endif
+	}
+#endif
+
 	return 0;
 }
 
@@ -261,12 +340,308 @@ msg_done:
 	return 0;
 }
 
+// add start
+#ifdef MT7621_MB_STRANS
+/*
+ * more-byte-mode for reading and writing data
+ */
+static int mt7621_spi_mb_transfer_half_duplex
+(
+ struct spi_master *master,
+ struct spi_message *m
+ )
+{
+	struct mt7621_spi *rs = spi_master_get_devdata(master);
+	struct spi_device *spi = m->spi;
+	unsigned int speed = spi->max_speed_hz;
+	struct spi_transfer *t = NULL;
+	int status = 0;
+	int i = 0, len = 0;
+	u8 is_write = 0;
+	u32 data[9] = { 0 };
+	u32 val = 0;
+	u32 transfer_len = 0;
+	int cs_active = 0;
+		unsigned long flags;
+
+
+	mt7621_spi_wait_till_ready(spi);
+
+	spin_lock_irqsave(&rs->lock, flags);
+
+	udelay(100);
+
+	//dev_dbg(&spi->dev, "seven spidev test ->cs: %d\n", spi->chip_select);
+
+	list_for_each_entry(t, &m->transfers, transfer_list) {
+		const u8 *txbuf = t->tx_buf;
+		u8 *rxbuf = t->rx_buf;
+
+		if (t->tx_buf == NULL && t->rx_buf == NULL && t->len) {
+			dev_err(&spi->dev,
+					"message rejected: invalid transfer data buffers\n");
+			status = -EIO;
+			goto msg_done;
+		}
+
+		if (rxbuf)
+			is_write = 0;
+		else if(txbuf)
+			is_write = 1;
+
+		if (mt7621_spi_prepare(spi, speed)) {
+			status = -EIO;
+			goto msg_done;
+		}
+
+		transfer_len = t->len/4; 
+		//mt7621_spi_set_cs(spi, 1);
+		if (!cs_active) {
+			mt7621_spi_set_cs(spi, 1);
+			cs_active = 1;
+		}
+		//printk("seven %s %d tlen:%d, transfer_len:%d, write:%d\n", __func__, __LINE__, t->len, transfer_len, is_write);
+
+		if(transfer_len){	/* for word transfer */
+			u32 u32TxNum = 0;
+
+			while ( transfer_len > 0 )
+			{
+				u32TxNum = transfer_len%8;
+				if ( !u32TxNum )
+					u32TxNum = 8;
+
+				for ( i=0; i<u32TxNum*4; i++)
+				{
+					if ( is_write ){	/* for write transfer */
+						data[i / 4] |= *txbuf++ << (8 * (i & 3));
+					}
+					//else	/* for read transfer */
+
+				}
+#if 0
+				for(i=0; i<u32TxNum*4; i += 4)
+					printk("0x%x, ", data[i/4]);
+
+				printk("\n");
+#endif
+				data[0] = swab32(data[0]);
+				val = 0;
+				if(is_write){
+					for(i=0; i<u32TxNum*4; i += 4)
+						mt7621_spi_write(rs, MT7621_SPI_OPCODE + i, data[i / 4]);
+
+					val = (min_t(int, u32TxNum*4, 4) * 8) << 24;	/* must be set 32 */
+					val |= ((u32TxNum*4) - 4) * 8;					/* mosi_cnt */
+				}else
+					val |= ((u32TxNum*4) * 8) << 12;				/* miso_cnt */
+
+				mt7621_spi_write(rs, MT7621_SPI_MOREBUF, val);
+				//mt7621_spi_set_cs(spi, 1);
+				val = mt7621_spi_read(rs, MT7621_SPI_TRANS);
+				val |= SPI_CTL_START;
+				mt7621_spi_write(rs, MT7621_SPI_TRANS, val);
+
+				mt7621_spi_wait_till_ready(spi);
+
+				if(!is_write){
+
+					for (i = 0; i < u32TxNum*4; i += 4)
+						data[i / 4] = mt7621_spi_read(rs, MT7621_SPI_DATA0 + i);
+
+					for (i = 0; i < u32TxNum*4; i++)
+						*rxbuf++ = data[i / 4] >> (8 * (i & 3));
+				}
+
+				len += u32TxNum*4;
+				transfer_len -= u32TxNum;
+				memset(data, 0, sizeof(data));
+
+			}
+
+		}
+
+		transfer_len = t->len%4;
+		if(transfer_len){	/* for bytes transfer 0-3bytes*/
+
+			for ( i=0; i<transfer_len; i++ ){
+				if(is_write)
+					data[i / 4] |= *txbuf++ << (8 * (i & 3));
+			}
+
+			data[0] = swab32(data[0]);
+			data[0] >>= (4 - transfer_len) * 8;
+
+			val = 0;
+			if(is_write){
+				for(i=0; i<transfer_len; i += 4)
+					mt7621_spi_write(rs, MT7621_SPI_OPCODE + i, data[i / 4]);
+
+				val = (min_t(int, transfer_len, 4) * 8) << 24;	/* must be 32 */
+				//val |= (transfer_len - 4) * 8;		/* mosi_cnt */
+			}else{
+				val |= (transfer_len* 8) << 12;			/* miso_cnt */
+			}
+			mt7621_spi_write(rs, MT7621_SPI_MOREBUF, val);
+			val = mt7621_spi_read(rs, MT7621_SPI_TRANS);
+			val |= SPI_CTL_START;
+			mt7621_spi_write(rs, MT7621_SPI_TRANS, val);
+
+			mt7621_spi_wait_till_ready(spi);
+
+			if(!is_write){
+
+				for (i = 0; i < transfer_len; i += 4)
+					data[i / 4] = mt7621_spi_read(rs, MT7621_SPI_DATA0 + i);
+
+				for (i = 0; i < transfer_len; i++)
+					*rxbuf++ = data[i / 4] >> (8 * (i & 3));
+			}
+			len += transfer_len;
+			memset(data, 0, sizeof(data));		
+		}
+
+		m->actual_length = len; 	//+ rx_len;
+		//mt7621_spi_set_cs(spi, 0);
+		if (t->cs_change) {
+			mt7621_spi_set_cs(spi, 0);
+			cs_active = 0;
+		}			
+	}
+
+msg_done:
+	if (cs_active)
+		mt7621_spi_set_cs(spi, 0);
+
+	spin_unlock_irqrestore(&rs->lock, flags);
+	m->status = status;
+	spi_finalize_current_message(master);
+
+	return 0;
+}
+#else
+/*
+ * one-byte-one for reading and writing data
+ */
+	static int mt7621_spi_single_transfer_half_duplex
+(
+ struct spi_master *master,
+ struct spi_message *m
+ )
+{
+	struct mt7621_spi *rs = spi_master_get_devdata(master);
+	struct spi_device *spi = m->spi;
+	unsigned int speed = spi->max_speed_hz;
+	struct spi_transfer *t = NULL;
+	int status = 0;
+	int len = 0;
+	u8 is_write = 0;
+	u32 data[9] = { 0 };
+	u32 val = 0;
+	u32 transfer_len = 0;
+	int cs_active = 0;
+	//dev_info(&spi->dev, "seven spidev test ->cs:\n");
+	
+	udelay(10);
+
+	mt7621_spi_wait_till_ready(spi);
+
+	list_for_each_entry(t, &m->transfers, transfer_list) {
+		const u8 *txbuf = t->tx_buf;
+		u8 *rxbuf = t->rx_buf;
+
+		if (t->tx_buf == NULL && t->rx_buf == NULL && t->len) {
+			dev_err(&spi->dev,
+					"message rejected: invalid transfer data buffers\n");
+			status = -EIO;
+			goto msg_done;
+		}
+
+		if (rxbuf)
+			is_write = 0;
+		else if(txbuf)
+			is_write = 1;
+
+		if (mt7621_spi_prepare(spi, speed)) {
+			status = -EIO;
+			goto msg_done;
+		}
+
+		//mt7621_spi_set_cs(spi, 1);
+		if (!cs_active) {
+			mt7621_spi_set_cs(spi, 1);
+			cs_active = 1;
+		}
+		transfer_len = t->len;
+		if(transfer_len){	/* for bytes transfer one byte one */
+			while(transfer_len){
+				memset(data, 0, sizeof(data));
+
+				if(is_write)
+					data[0] = *txbuf++;	
+				data[0] = swab32(data[0]);
+				data[0] >>= 24;	
+
+				val = 0;
+				if(is_write){
+					mt7621_spi_write(rs, MT7621_SPI_OPCODE, data[0]);
+
+					val = 8 << 24;	/* must be 8 for single byte */
+					//val |= (transfer_len - 4) * 8;		/* mosi_cnt */
+				}else{
+					//val |= (transfer_len* 8) << 12;			/* miso_cnt */
+					val |= 8 << 12;			/* miso_cnt */
+				}
+				mt7621_spi_write(rs, MT7621_SPI_MOREBUF, val);
+				val = mt7621_spi_read(rs, MT7621_SPI_TRANS);
+				val |= SPI_CTL_START;
+				mt7621_spi_write(rs, MT7621_SPI_TRANS, val);
+
+				mt7621_spi_wait_till_ready(spi);
+
+				if(!is_write)
+					*rxbuf++ = mt7621_spi_read(rs, MT7621_SPI_DATA0);
+
+				len ++;
+				transfer_len--;
+			}	//while
+		}
+
+		m->actual_length = len; 	//+ rx_len;
+		//mt7621_spi_set_cs(spi, 0);
+		if (t->cs_change) {
+			mt7621_spi_set_cs(spi, 0);
+			cs_active = 0;
+		}		
+	}
+
+msg_done:
+	if (cs_active)
+		mt7621_spi_set_cs(spi, 0);
+	m->status = status;
+	spi_finalize_current_message(master);
+
+	return 0;
+}
+#endif
+
+
+
+// add end
+
 static int mt7621_spi_transfer_one_message(struct spi_master *master,
 					   struct spi_message *m)
 {
 	struct spi_device *spi = m->spi;
 	int cs = spi->chip_select;
 
+	if (cs > 1)
+#ifdef MT7621_MB_STRANS		
+		return mt7621_spi_mb_transfer_half_duplex(master, m);		/* more bytes */
+#else
+		return mt7621_spi_single_transfer_half_duplex(master, m);	/* single byte transfer */
+#endif
+
 	return mt7621_spi_transfer_half_duplex(master, m);
 }
 
@@ -284,7 +659,26 @@ static int mt7621_spi_setup(struct spi_d
 		return -EINVAL;
 	}
 
-	return 0;
+	/**********************************************************
+	  Modefiy  zkz on here
+	 ***********************************************************/
+
+	int cs  = spi->chip_select;
+	int status = 0;
+#if 1
+	if(cs>=2) {
+
+		//status = gpio_request_one(spi_cs[cs], (GPIOF_OUT_INIT_HIGH | GPIOF_ACTIVE_LOW), NULL);
+
+		status = gpio_direction_output(spi_cs[cs], 1);
+
+		dev_info(spi->master->dev.parent,"in %s , cs_gpio = %d , status = %d\n", __func__, spi_cs[cs], status);
+
+		//gpio_free(spi_cs[cs]);
+	}
+#endif
+
+	return status;
 }
 
 static const struct of_device_id mt7621_spi_match[] = {
@@ -336,9 +730,18 @@ static int mt7621_spi_probe(struct platf
 
 	master->setup = mt7621_spi_setup;
 	master->transfer_one_message = mt7621_spi_transfer_one_message;
-	master->bits_per_word_mask = SPI_BPW_RANGE_MASK(8, 16);
+	//master->bits_per_word_mask = SPI_BPW_RANGE_MASK(8, 16);
+	master->bits_per_word_mask = SPI_BPW_MASK(8);
 	master->dev.of_node = pdev->dev.of_node;
+
+	/**********************************************************
+	  Modefiy  zkz on here
+	 ***********************************************************/
+#if 0
 	master->num_chipselect = 2;
+#else
+	master->num_chipselect = 10;
+#endif 
 
 	dev_set_drvdata(&pdev->dev, master);
 
